// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package profiledb

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getProfileUser = `-- name: GetProfileUser :one
SELECT
    user_id,
    display_name,
    avatar_url,
    profile_version,
    preferences_json,
    created_at,
    updated_at
FROM profile.users
WHERE user_id = $1
`

func (q *Queries) GetProfileUser(ctx context.Context, userID uuid.UUID) (ProfileUser, error) {
	row := q.db.QueryRow(ctx, getProfileUser, userID)
	var i ProfileUser
	err := row.Scan(
		&i.UserID,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.ProfileVersion,
		&i.PreferencesJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertProfileUser = `-- name: UpsertProfileUser :one
INSERT INTO profile.users (
    user_id,
    display_name,
    avatar_url,
    profile_version,
    preferences_json
) VALUES (
    $1, $2, $3, $4, $5
)
ON CONFLICT (user_id) DO UPDATE
SET display_name = EXCLUDED.display_name,
    avatar_url = EXCLUDED.avatar_url,
    profile_version = EXCLUDED.profile_version,
    preferences_json = EXCLUDED.preferences_json,
    updated_at = now()
RETURNING
    user_id,
    display_name,
    avatar_url,
    profile_version,
    preferences_json,
    created_at,
    updated_at
`

type UpsertProfileUserParams struct {
	UserID          uuid.UUID   `json:"user_id"`
	DisplayName     string      `json:"display_name"`
	AvatarUrl       pgtype.Text `json:"avatar_url"`
	ProfileVersion  int64       `json:"profile_version"`
	PreferencesJson []byte      `json:"preferences_json"`
}

func (q *Queries) UpsertProfileUser(ctx context.Context, arg UpsertProfileUserParams) (ProfileUser, error) {
	row := q.db.QueryRow(ctx, upsertProfileUser,
		arg.UserID,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.ProfileVersion,
		arg.PreferencesJson,
	)
	var i ProfileUser
	err := row.Scan(
		&i.UserID,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.ProfileVersion,
		&i.PreferencesJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
