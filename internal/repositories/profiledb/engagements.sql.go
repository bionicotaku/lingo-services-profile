// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: engagements.sql

package profiledb

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getEngagement = `-- name: GetEngagement :one
SELECT
    user_id,
    video_id,
    engagement_type,
    created_at,
    updated_at,
    deleted_at
FROM profile.engagements
WHERE user_id = $1
  AND video_id = $2
  AND engagement_type = $3
`

type GetEngagementParams struct {
	UserID         uuid.UUID `json:"user_id"`
	VideoID        uuid.UUID `json:"video_id"`
	EngagementType string    `json:"engagement_type"`
}

func (q *Queries) GetEngagement(ctx context.Context, arg GetEngagementParams) (ProfileEngagement, error) {
	row := q.db.QueryRow(ctx, getEngagement, arg.UserID, arg.VideoID, arg.EngagementType)
	var i ProfileEngagement
	err := row.Scan(
		&i.UserID,
		&i.VideoID,
		&i.EngagementType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listEngagementsByUser = `-- name: ListEngagementsByUser :many
SELECT
    user_id,
    video_id,
    engagement_type,
    created_at,
    updated_at,
    deleted_at
FROM profile.engagements
WHERE user_id = $1
  AND ($2 = '' OR engagement_type = $2)
  AND (deleted_at IS NULL OR $3 = false)
ORDER BY created_at DESC
LIMIT $4 OFFSET $5
`

type ListEngagementsByUserParams struct {
	UserID  uuid.UUID   `json:"user_id"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) ListEngagementsByUser(ctx context.Context, arg ListEngagementsByUserParams) ([]ProfileEngagement, error) {
	rows, err := q.db.Query(ctx, listEngagementsByUser,
		arg.UserID,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProfileEngagement{}
	for rows.Next() {
		var i ProfileEngagement
		if err := rows.Scan(
			&i.UserID,
			&i.VideoID,
			&i.EngagementType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteEngagement = `-- name: SoftDeleteEngagement :exec
UPDATE profile.engagements
SET deleted_at = $4,
    updated_at = COALESCE($4, now())
WHERE user_id = $1
  AND video_id = $2
  AND engagement_type = $3
`

type SoftDeleteEngagementParams struct {
	UserID         uuid.UUID          `json:"user_id"`
	VideoID        uuid.UUID          `json:"video_id"`
	EngagementType string             `json:"engagement_type"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
}

func (q *Queries) SoftDeleteEngagement(ctx context.Context, arg SoftDeleteEngagementParams) error {
	_, err := q.db.Exec(ctx, softDeleteEngagement,
		arg.UserID,
		arg.VideoID,
		arg.EngagementType,
		arg.DeletedAt,
	)
	return err
}

const upsertEngagement = `-- name: UpsertEngagement :exec
INSERT INTO profile.engagements (
    user_id,
    video_id,
    engagement_type,
    created_at,
    updated_at,
    deleted_at
) VALUES (
    $1, $2, $3, COALESCE($4, now()), COALESCE($4, now()), NULL
)
ON CONFLICT (user_id, video_id, engagement_type) DO UPDATE
SET deleted_at = NULL,
    updated_at = COALESCE($4, now()),
    created_at = profile.engagements.created_at
`

type UpsertEngagementParams struct {
	UserID         uuid.UUID   `json:"user_id"`
	VideoID        uuid.UUID   `json:"video_id"`
	EngagementType string      `json:"engagement_type"`
	Column4        interface{} `json:"column_4"`
}

func (q *Queries) UpsertEngagement(ctx context.Context, arg UpsertEngagementParams) error {
	_, err := q.db.Exec(ctx, upsertEngagement,
		arg.UserID,
		arg.VideoID,
		arg.EngagementType,
		arg.Column4,
	)
	return err
}
