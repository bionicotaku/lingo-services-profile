// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: video_stats.sql

package profiledb

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getVideoStats = `-- name: GetVideoStats :one
SELECT
    video_id,
    like_count,
    bookmark_count,
    unique_watchers,
    total_watch_seconds,
    updated_at
FROM profile.video_stats
WHERE video_id = $1
`

func (q *Queries) GetVideoStats(ctx context.Context, videoID uuid.UUID) (ProfileVideoStat, error) {
	row := q.db.QueryRow(ctx, getVideoStats, videoID)
	var i ProfileVideoStat
	err := row.Scan(
		&i.VideoID,
		&i.LikeCount,
		&i.BookmarkCount,
		&i.UniqueWatchers,
		&i.TotalWatchSeconds,
		&i.UpdatedAt,
	)
	return i, err
}

const listVideoStats = `-- name: ListVideoStats :many
SELECT
    video_id,
    like_count,
    bookmark_count,
    unique_watchers,
    total_watch_seconds,
    updated_at
FROM profile.video_stats
WHERE video_id = ANY($1::uuid[])
`

func (q *Queries) ListVideoStats(ctx context.Context, dollar_1 []uuid.UUID) ([]ProfileVideoStat, error) {
	rows, err := q.db.Query(ctx, listVideoStats, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProfileVideoStat{}
	for rows.Next() {
		var i ProfileVideoStat
		if err := rows.Scan(
			&i.VideoID,
			&i.LikeCount,
			&i.BookmarkCount,
			&i.UniqueWatchers,
			&i.TotalWatchSeconds,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setVideoStats = `-- name: SetVideoStats :exec
UPDATE profile.video_stats
SET like_count          = $2,
    bookmark_count      = $3,
    unique_watchers     = $4,
    total_watch_seconds = $5,
    updated_at          = COALESCE($6, now())
WHERE video_id = $1
`

type SetVideoStatsParams struct {
	VideoID           uuid.UUID          `json:"video_id"`
	LikeCount         int64              `json:"like_count"`
	BookmarkCount     int64              `json:"bookmark_count"`
	UniqueWatchers    int64              `json:"unique_watchers"`
	TotalWatchSeconds int64              `json:"total_watch_seconds"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) SetVideoStats(ctx context.Context, arg SetVideoStatsParams) error {
	_, err := q.db.Exec(ctx, setVideoStats,
		arg.VideoID,
		arg.LikeCount,
		arg.BookmarkCount,
		arg.UniqueWatchers,
		arg.TotalWatchSeconds,
		arg.UpdatedAt,
	)
	return err
}

const upsertVideoStats = `-- name: UpsertVideoStats :exec
INSERT INTO profile.video_stats (
    video_id,
    like_count,
    bookmark_count,
    unique_watchers,
    total_watch_seconds,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, COALESCE($6, now())
)
ON CONFLICT (video_id) DO UPDATE
SET like_count          = profile.video_stats.like_count + $2,
    bookmark_count      = profile.video_stats.bookmark_count + $3,
    unique_watchers     = profile.video_stats.unique_watchers + $4,
    total_watch_seconds = profile.video_stats.total_watch_seconds + $5,
    updated_at          = COALESCE($6, now())
`

type UpsertVideoStatsParams struct {
	VideoID           uuid.UUID   `json:"video_id"`
	LikeCount         int64       `json:"like_count"`
	BookmarkCount     int64       `json:"bookmark_count"`
	UniqueWatchers    int64       `json:"unique_watchers"`
	TotalWatchSeconds int64       `json:"total_watch_seconds"`
	Column6           interface{} `json:"column_6"`
}

func (q *Queries) UpsertVideoStats(ctx context.Context, arg UpsertVideoStatsParams) error {
	_, err := q.db.Exec(ctx, upsertVideoStats,
		arg.VideoID,
		arg.LikeCount,
		arg.BookmarkCount,
		arg.UniqueWatchers,
		arg.TotalWatchSeconds,
		arg.Column6,
	)
	return err
}
