// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bionicotaku/lingo-services-profile/internal/services (interfaces: EngagementsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	po "github.com/bionicotaku/lingo-services-profile/internal/models/po"
	repositories "github.com/bionicotaku/lingo-services-profile/internal/repositories"
	txmanager "github.com/bionicotaku/lingo-utils/txmanager"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockEngagementsRepository is a mock of EngagementsRepository interface.
type MockEngagementsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEngagementsRepositoryMockRecorder
}

// MockEngagementsRepositoryMockRecorder is the mock recorder for MockEngagementsRepository.
type MockEngagementsRepositoryMockRecorder struct {
	mock *MockEngagementsRepository
}

// NewMockEngagementsRepository creates a new mock instance.
func NewMockEngagementsRepository(ctrl *gomock.Controller) *MockEngagementsRepository {
	mock := &MockEngagementsRepository{ctrl: ctrl}
	mock.recorder = &MockEngagementsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngagementsRepository) EXPECT() *MockEngagementsRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEngagementsRepository) Get(arg0 context.Context, arg1 txmanager.Session, arg2, arg3 uuid.UUID, arg4 string) (*po.ProfileEngagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*po.ProfileEngagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEngagementsRepositoryMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEngagementsRepository)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// ListByUser mocks base method.
func (m *MockEngagementsRepository) ListByUser(arg0 context.Context, arg1 txmanager.Session, arg2 uuid.UUID, arg3 *string, arg4 bool, arg5, arg6 int32) ([]*po.ProfileEngagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]*po.ProfileEngagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockEngagementsRepositoryMockRecorder) ListByUser(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockEngagementsRepository)(nil).ListByUser), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// SoftDelete mocks base method.
func (m *MockEngagementsRepository) SoftDelete(arg0 context.Context, arg1 txmanager.Session, arg2 repositories.SoftDeleteProfileEngagementInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockEngagementsRepositoryMockRecorder) SoftDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockEngagementsRepository)(nil).SoftDelete), arg0, arg1, arg2)
}

// Upsert mocks base method.
func (m *MockEngagementsRepository) Upsert(arg0 context.Context, arg1 txmanager.Session, arg2 repositories.UpsertProfileEngagementInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockEngagementsRepositoryMockRecorder) Upsert(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockEngagementsRepository)(nil).Upsert), arg0, arg1, arg2)
}
