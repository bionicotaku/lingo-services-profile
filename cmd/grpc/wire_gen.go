// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"

	"github.com/bionicotaku/lingo-services-profile/internal/controllers"
	"github.com/bionicotaku/lingo-services-profile/internal/infrastructure/configloader"
	"github.com/bionicotaku/lingo-services-profile/internal/infrastructure/grpc_server"
	"github.com/bionicotaku/lingo-services-profile/internal/repositories"
	"github.com/bionicotaku/lingo-services-profile/internal/services"
	"github.com/bionicotaku/lingo-services-profile/internal/tasks/outbox"
	"github.com/bionicotaku/lingo-utils/gcjwt"
	"github.com/bionicotaku/lingo-utils/gclog"
	"github.com/bionicotaku/lingo-utils/gcpubsub"
	"github.com/bionicotaku/lingo-utils/observability"
	"github.com/bionicotaku/lingo-utils/pgxpoolx"
	"github.com/bionicotaku/lingo-utils/txmanager"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp 构建整个 Kratos 应用，分阶段装配依赖。
//
// Wire 会根据类型自动解析依赖关系并生成 wire_gen.go，详细的 Provider 列表见文件末尾注释。
//
// 依赖注入顺序:
//  1. 配置加载: configloader.ProviderSet 解析配置并派生组件配置
//  2. 基础设施: gclog → observability → gcjwt → pgxpoolx → txmanager
//  3. 业务层: repositories → services → controllers
//  4. 服务器: grpc_server.ProviderSet 组装 gRPC Server
//  5. 应用: newApp 创建 Kratos App
func wireApp(contextContext context.Context, params configloader.Params) (*kratos.App, func(), error) {
	runtimeConfig, err := configloader.LoadRuntimeConfig(params)
	if err != nil {
		return nil, nil, err
	}
	observabilityConfig := configloader.ProvideObservabilityConfig(runtimeConfig)
	serviceInfo := configloader.ProvideServiceInfo(runtimeConfig)
	observabilityServiceInfo := configloader.ProvideObservabilityInfo(serviceInfo)
	config := configloader.ProvideLoggerConfig(serviceInfo)
	component, cleanup, err := gclog.NewComponent(config)
	if err != nil {
		return nil, nil, err
	}
	logger := gclog.ProvideLogger(component)
	observabilityComponent, cleanup2, err := observability.NewComponent(contextContext, observabilityConfig, observabilityServiceInfo, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	serverConfig := configloader.ProvideServerConfig(runtimeConfig)
	metricsConfig := observability.ProvideMetricsConfig(observabilityConfig)
	gcjwtConfig := configloader.ProvideJWTConfig(runtimeConfig)
	gcjwtComponent, cleanup3, err := gcjwt.NewComponent(gcjwtConfig, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	serverMiddleware, err := gcjwt.ProvideServerMiddleware(gcjwtComponent)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	databaseConfig := configloader.ProvideDatabaseConfig(runtimeConfig)
	pgxpoolxConfig := configloader.ProvidePgxConfig(databaseConfig)
	pgxpoolxComponent, cleanup4, err := pgxpoolx.ProvideComponent(contextContext, pgxpoolxConfig, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pool := pgxpoolx.ProvidePool(pgxpoolxComponent)
	profileUsersRepository := repositories.NewProfileUsersRepository(pool, logger)
	txmanagerConfig := configloader.ProvideTxConfig(runtimeConfig)
	txmanagerComponent, cleanup5, err := txmanager.NewComponent(txmanagerConfig, pool, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	manager := txmanager.ProvideManager(txmanagerComponent)
	profileService := services.NewProfileService(profileUsersRepository, manager, logger)
	profileEngagementsRepository := repositories.NewProfileEngagementsRepository(pool, logger)
	profileVideoStatsRepository := repositories.NewProfileVideoStatsRepository(pool, logger)
	messagingConfig := configloader.ProvideMessagingConfig(runtimeConfig)
	configConfig := configloader.ProvideOutboxConfig(messagingConfig)
	outboxRepository := repositories.NewOutboxRepository(pool, logger, configConfig)
	engagementService := services.NewEngagementService(profileEngagementsRepository, profileVideoStatsRepository, outboxRepository, manager, logger)
	profileWatchLogsRepository := repositories.NewProfileWatchLogsRepository(pool, logger)
	watchHistoryService := services.NewWatchHistoryService(profileWatchLogsRepository, profileVideoStatsRepository, outboxRepository, manager, logger)
	profileVideoProjectionRepository := repositories.NewProfileVideoProjectionRepository(pool, logger)
	videoProjectionService := services.NewVideoProjectionService(profileVideoProjectionRepository, logger)
	videoStatsService := services.NewVideoStatsService(profileVideoStatsRepository, logger)
	handlerTimeouts := configloader.ProvideHandlerTimeouts(runtimeConfig)
	baseHandler := controllers.NewBaseHandler(handlerTimeouts)
	profileHandler := controllers.NewProfileHandler(profileService, engagementService, watchHistoryService, videoProjectionService, videoStatsService, baseHandler)
	server := grpcserver.NewGRPCServer(serverConfig, metricsConfig, serverMiddleware, profileHandler, logger)
	gcpubsubConfig := configloader.ProvidePubSubConfig(messagingConfig)
	dependencies := configloader.ProvidePubSubDependencies(logger)
	gcpubsubComponent, cleanup6, err := gcpubsub.NewComponent(contextContext, gcpubsubConfig, dependencies)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	publisher := gcpubsub.ProvidePublisher(gcpubsubComponent)
	runner := outbox.ProvideRunner(outboxRepository, publisher, gcpubsubConfig, configConfig, logger)
	app := newApp(observabilityComponent, logger, server, serviceInfo, runner)
	return app, func() {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
