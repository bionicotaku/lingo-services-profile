syntax = "proto3";

package video.v1;

option go_package = "github.com/bionicotaku/lingo-services-catalog/api/video/v1;videov1";

// EventType 定义事件类型枚举
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_VIDEO_CREATED = 1;
  EVENT_TYPE_VIDEO_UPDATED = 2;
  EVENT_TYPE_VIDEO_DELETED = 3;
  EVENT_TYPE_VIDEO_MEDIA_READY = 4;
  EVENT_TYPE_VIDEO_AI_ENRICHED = 5;
  EVENT_TYPE_VIDEO_PROCESSING_FAILED = 6;
  EVENT_TYPE_VIDEO_VISIBILITY_CHANGED = 7;
}

// Event 是通用事件信封（Envelope）
// 用于统一封装不同类型的事件，便于序列化、传输和处理
message Event {
  string event_id = 1;                               // 事件唯一标识 (UUID)
  EventType event_type = 2;                          // 事件类型
  string aggregate_id = 3;                           // 聚合根 ID (通常是 video_id)
  string aggregate_type = 4;                         // 聚合类型（如 "video"）
  int64 version = 5;                                 // 聚合版本号
  string occurred_at = 6;                            // 事件发生时间（UTC RFC3339）

  // 使用 oneof 实现多态，根据 event_type 包含对应的 payload
  oneof payload {
    VideoCreated created = 10;
    VideoUpdated updated = 11;
    VideoDeleted deleted = 12;
    VideoMediaReady media_ready = 13;
    VideoAIEnriched ai_enriched = 14;
    VideoProcessingFailed processing_failed = 15;
    VideoVisibilityChanged visibility_changed = 16;
  }

  // VideoCreated 表示视频创建事件
  // 当一个新视频元数据被创建时发布此事件
  message VideoCreated {
    string video_id = 1;                               // 视频唯一标识 (UUID)
    string uploader_id = 2;                            // 上传者标识 (UUID)
    string title = 3;                                  // 视频标题
    optional string description = 4;                   // 视频描述（可选）
    optional int64 duration_micros = 5;                // 视频时长（微秒，可选）
    optional string published_at = 6;                  // 视频发布时间（UTC RFC3339，可选）
    int64 version = 7;                                 // 聚合版本号
    string occurred_at = 8;                            // 事件发生时间（UTC RFC3339）
    string status = 9;                                 // 视频状态
    string media_status = 10;                          // 媒体处理状态
    string analysis_status = 11;                       // 分析状态
  }

  // VideoUpdated 表示视频更新事件
  // 当视频元数据被更新时发布此事件
  // 只包含被更新的字段（部分更新语义）
  message VideoUpdated {
    string video_id = 1;                               // 视频唯一标识 (UUID)
    int64 version = 2;                                 // 新版本号
    string occurred_at = 3;                            // 事件发生时间（UTC RFC3339）

    // 以下字段为可选，仅包含实际被更新的字段
    optional string title = 10;
    optional string description = 11;
    optional int64 duration_micros = 12;
    optional string status = 13;
    optional string media_status = 14;
    optional string analysis_status = 15;
    optional string thumbnail_url = 16;
    optional string hls_master_playlist = 17;
    optional string difficulty = 18;
    optional string summary = 19;
    repeated string tags = 20;
    optional string raw_subtitle_url = 21;
    optional string published_at = 22;
    optional string visibility_status = 23;
  }

  // VideoDeleted 表示视频删除事件
  // 当视频被删除时发布此事件
  message VideoDeleted {
    string video_id = 1;                               // 视频唯一标识 (UUID)
    int64 version = 2;                                 // 版本号
    optional string deleted_at = 3;                    // 删除时间（UTC RFC3339，可选）
    string occurred_at = 4;                            // 事件发生时间（UTC RFC3339）
    optional string reason = 5;                        // 删除原因（可选）
  }

  // VideoMediaReady 表示媒体阶段完成事件
  message VideoMediaReady {
    string video_id = 1;
    int64 version = 2;
    string occurred_at = 3;
    string status = 4;
    string media_status = 5;
    optional int64 duration_micros = 6;
    optional string encoded_resolution = 7;
    optional int32 encoded_bitrate = 8;
    optional string thumbnail_url = 9;
    optional string hls_master_playlist = 10;
    optional string job_id = 11;
    optional string emitted_at = 12;
    string analysis_status = 13;
  }

  // VideoAIEnriched 表示 AI 阶段完成事件
  message VideoAIEnriched {
    string video_id = 1;
    int64 version = 2;
    string occurred_at = 3;
    string status = 4;
    string analysis_status = 5;
    optional string difficulty = 6;
    optional string summary = 7;
    repeated string tags = 8;
    optional string raw_subtitle_url = 9;
    optional string job_id = 10;
    optional string emitted_at = 11;
    optional string error_message = 12;
    string media_status = 13;
  }

  // VideoProcessingFailed 表示处理阶段失败事件
  message VideoProcessingFailed {
    string video_id = 1;
    int64 version = 2;
    string occurred_at = 3;
    string failed_stage = 4;
    optional string error_message = 5;
    optional string job_id = 6;
    optional string emitted_at = 7;
    string status = 8;
    string media_status = 9;
    string analysis_status = 10;
  }

  // VideoVisibilityChanged 表示可见性变化事件
  message VideoVisibilityChanged {
    string video_id = 1;
    int64 version = 2;
    string occurred_at = 3;
    string status = 4;
    optional string previous_status = 5;
    optional string published_at = 6;
    optional string reason = 7;
    // reserved 8, 9 for future actor metadata (temporary removal during MVP)
    reserved 8, 9;
    optional string visibility_status = 10;
  }
}
