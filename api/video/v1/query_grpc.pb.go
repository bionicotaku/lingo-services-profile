// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/video/v1/query.proto

package videov1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogQueryService_GetVideoMetadata_FullMethodName     = "/video.v1.CatalogQueryService/GetVideoMetadata"
	CatalogQueryService_GetVideoDetail_FullMethodName       = "/video.v1.CatalogQueryService/GetVideoDetail"
	CatalogQueryService_ListUserPublicVideos_FullMethodName = "/video.v1.CatalogQueryService/ListUserPublicVideos"
	CatalogQueryService_ListMyUploads_FullMethodName        = "/video.v1.CatalogQueryService/ListMyUploads"
)

// CatalogQueryServiceClient is the client API for CatalogQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CatalogQueryService 提供视频只读查询能力。
type CatalogQueryServiceClient interface {
	GetVideoMetadata(ctx context.Context, in *GetVideoMetadataRequest, opts ...grpc.CallOption) (*GetVideoMetadataResponse, error)
	GetVideoDetail(ctx context.Context, in *GetVideoDetailRequest, opts ...grpc.CallOption) (*GetVideoDetailResponse, error)
	ListUserPublicVideos(ctx context.Context, in *ListUserPublicVideosRequest, opts ...grpc.CallOption) (*ListUserPublicVideosResponse, error)
	ListMyUploads(ctx context.Context, in *ListMyUploadsRequest, opts ...grpc.CallOption) (*ListMyUploadsResponse, error)
}

type catalogQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogQueryServiceClient(cc grpc.ClientConnInterface) CatalogQueryServiceClient {
	return &catalogQueryServiceClient{cc}
}

func (c *catalogQueryServiceClient) GetVideoMetadata(ctx context.Context, in *GetVideoMetadataRequest, opts ...grpc.CallOption) (*GetVideoMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoMetadataResponse)
	err := c.cc.Invoke(ctx, CatalogQueryService_GetVideoMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogQueryServiceClient) GetVideoDetail(ctx context.Context, in *GetVideoDetailRequest, opts ...grpc.CallOption) (*GetVideoDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoDetailResponse)
	err := c.cc.Invoke(ctx, CatalogQueryService_GetVideoDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogQueryServiceClient) ListUserPublicVideos(ctx context.Context, in *ListUserPublicVideosRequest, opts ...grpc.CallOption) (*ListUserPublicVideosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserPublicVideosResponse)
	err := c.cc.Invoke(ctx, CatalogQueryService_ListUserPublicVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogQueryServiceClient) ListMyUploads(ctx context.Context, in *ListMyUploadsRequest, opts ...grpc.CallOption) (*ListMyUploadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyUploadsResponse)
	err := c.cc.Invoke(ctx, CatalogQueryService_ListMyUploads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogQueryServiceServer is the server API for CatalogQueryService service.
// All implementations must embed UnimplementedCatalogQueryServiceServer
// for forward compatibility.
//
// CatalogQueryService 提供视频只读查询能力。
type CatalogQueryServiceServer interface {
	GetVideoMetadata(context.Context, *GetVideoMetadataRequest) (*GetVideoMetadataResponse, error)
	GetVideoDetail(context.Context, *GetVideoDetailRequest) (*GetVideoDetailResponse, error)
	ListUserPublicVideos(context.Context, *ListUserPublicVideosRequest) (*ListUserPublicVideosResponse, error)
	ListMyUploads(context.Context, *ListMyUploadsRequest) (*ListMyUploadsResponse, error)
	mustEmbedUnimplementedCatalogQueryServiceServer()
}

// UnimplementedCatalogQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogQueryServiceServer struct{}

func (UnimplementedCatalogQueryServiceServer) GetVideoMetadata(context.Context, *GetVideoMetadataRequest) (*GetVideoMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoMetadata not implemented")
}
func (UnimplementedCatalogQueryServiceServer) GetVideoDetail(context.Context, *GetVideoDetailRequest) (*GetVideoDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoDetail not implemented")
}
func (UnimplementedCatalogQueryServiceServer) ListUserPublicVideos(context.Context, *ListUserPublicVideosRequest) (*ListUserPublicVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPublicVideos not implemented")
}
func (UnimplementedCatalogQueryServiceServer) ListMyUploads(context.Context, *ListMyUploadsRequest) (*ListMyUploadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyUploads not implemented")
}
func (UnimplementedCatalogQueryServiceServer) mustEmbedUnimplementedCatalogQueryServiceServer() {}
func (UnimplementedCatalogQueryServiceServer) testEmbeddedByValue()                             {}

// UnsafeCatalogQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogQueryServiceServer will
// result in compilation errors.
type UnsafeCatalogQueryServiceServer interface {
	mustEmbedUnimplementedCatalogQueryServiceServer()
}

func RegisterCatalogQueryServiceServer(s grpc.ServiceRegistrar, srv CatalogQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCatalogQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogQueryService_ServiceDesc, srv)
}

func _CatalogQueryService_GetVideoMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogQueryServiceServer).GetVideoMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogQueryService_GetVideoMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogQueryServiceServer).GetVideoMetadata(ctx, req.(*GetVideoMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogQueryService_GetVideoDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogQueryServiceServer).GetVideoDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogQueryService_GetVideoDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogQueryServiceServer).GetVideoDetail(ctx, req.(*GetVideoDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogQueryService_ListUserPublicVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPublicVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogQueryServiceServer).ListUserPublicVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogQueryService_ListUserPublicVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogQueryServiceServer).ListUserPublicVideos(ctx, req.(*ListUserPublicVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogQueryService_ListMyUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyUploadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogQueryServiceServer).ListMyUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogQueryService_ListMyUploads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogQueryServiceServer).ListMyUploads(ctx, req.(*ListMyUploadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogQueryService_ServiceDesc is the grpc.ServiceDesc for CatalogQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.v1.CatalogQueryService",
	HandlerType: (*CatalogQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoMetadata",
			Handler:    _CatalogQueryService_GetVideoMetadata_Handler,
		},
		{
			MethodName: "GetVideoDetail",
			Handler:    _CatalogQueryService_GetVideoDetail_Handler,
		},
		{
			MethodName: "ListUserPublicVideos",
			Handler:    _CatalogQueryService_ListUserPublicVideos_Handler,
		},
		{
			MethodName: "ListMyUploads",
			Handler:    _CatalogQueryService_ListMyUploads_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/video/v1/query.proto",
}
