// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/profile/v1/profile.proto

package profilev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileService_GetProfile_FullMethodName          = "/profile.v1.ProfileService/GetProfile"
	ProfileService_UpdateProfile_FullMethodName       = "/profile.v1.ProfileService/UpdateProfile"
	ProfileService_UpdatePreferences_FullMethodName   = "/profile.v1.ProfileService/UpdatePreferences"
	ProfileService_MutateFavorite_FullMethodName      = "/profile.v1.ProfileService/MutateFavorite"
	ProfileService_BatchQueryFavorite_FullMethodName  = "/profile.v1.ProfileService/BatchQueryFavorite"
	ProfileService_ListFavorites_FullMethodName       = "/profile.v1.ProfileService/ListFavorites"
	ProfileService_UpsertWatchProgress_FullMethodName = "/profile.v1.ProfileService/UpsertWatchProgress"
	ProfileService_ListWatchHistory_FullMethodName    = "/profile.v1.ProfileService/ListWatchHistory"
	ProfileService_PurgeUserData_FullMethodName       = "/profile.v1.ProfileService/PurgeUserData"
)

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ProfileService 暴露用户档案、互动与观看历史相关的核心 RPC。
type ProfileServiceClient interface {
	// GetProfile 返回指定用户的档案与偏好信息。
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	// UpdateProfile 更新档案基础信息（昵称、头像等）。
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	// UpdatePreferences 局部更新学习/通知偏好。
	UpdatePreferences(ctx context.Context, in *UpdatePreferencesRequest, opts ...grpc.CallOption) (*UpdatePreferencesResponse, error)
	// MutateFavorite 新增或取消收藏/点赞。
	MutateFavorite(ctx context.Context, in *MutateFavoriteRequest, opts ...grpc.CallOption) (*MutateFavoriteResponse, error)
	// BatchQueryFavorite 批量查询视频的收藏/点赞状态与统计。
	BatchQueryFavorite(ctx context.Context, in *BatchQueryFavoriteRequest, opts ...grpc.CallOption) (*BatchQueryFavoriteResponse, error)
	// ListFavorites 游标分页返回收藏列表。
	ListFavorites(ctx context.Context, in *ListFavoritesRequest, opts ...grpc.CallOption) (*ListFavoritesResponse, error)
	// UpsertWatchProgress 写入或更新观看进度。
	UpsertWatchProgress(ctx context.Context, in *UpsertWatchProgressRequest, opts ...grpc.CallOption) (*UpsertWatchProgressResponse, error)
	// ListWatchHistory 返回最近观看记录。
	ListWatchHistory(ctx context.Context, in *ListWatchHistoryRequest, opts ...grpc.CallOption) (*ListWatchHistoryResponse, error)
	// PurgeUserData 触发用户数据清理流程。
	PurgeUserData(ctx context.Context, in *PurgeUserDataRequest, opts ...grpc.CallOption) (*PurgeUserDataResponse, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdatePreferences(ctx context.Context, in *UpdatePreferencesRequest, opts ...grpc.CallOption) (*UpdatePreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePreferencesResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpdatePreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) MutateFavorite(ctx context.Context, in *MutateFavoriteRequest, opts ...grpc.CallOption) (*MutateFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutateFavoriteResponse)
	err := c.cc.Invoke(ctx, ProfileService_MutateFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) BatchQueryFavorite(ctx context.Context, in *BatchQueryFavoriteRequest, opts ...grpc.CallOption) (*BatchQueryFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchQueryFavoriteResponse)
	err := c.cc.Invoke(ctx, ProfileService_BatchQueryFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListFavorites(ctx context.Context, in *ListFavoritesRequest, opts ...grpc.CallOption) (*ListFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFavoritesResponse)
	err := c.cc.Invoke(ctx, ProfileService_ListFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpsertWatchProgress(ctx context.Context, in *UpsertWatchProgressRequest, opts ...grpc.CallOption) (*UpsertWatchProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertWatchProgressResponse)
	err := c.cc.Invoke(ctx, ProfileService_UpsertWatchProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ListWatchHistory(ctx context.Context, in *ListWatchHistoryRequest, opts ...grpc.CallOption) (*ListWatchHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWatchHistoryResponse)
	err := c.cc.Invoke(ctx, ProfileService_ListWatchHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) PurgeUserData(ctx context.Context, in *PurgeUserDataRequest, opts ...grpc.CallOption) (*PurgeUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeUserDataResponse)
	err := c.cc.Invoke(ctx, ProfileService_PurgeUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility.
//
// ProfileService 暴露用户档案、互动与观看历史相关的核心 RPC。
type ProfileServiceServer interface {
	// GetProfile 返回指定用户的档案与偏好信息。
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	// UpdateProfile 更新档案基础信息（昵称、头像等）。
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	// UpdatePreferences 局部更新学习/通知偏好。
	UpdatePreferences(context.Context, *UpdatePreferencesRequest) (*UpdatePreferencesResponse, error)
	// MutateFavorite 新增或取消收藏/点赞。
	MutateFavorite(context.Context, *MutateFavoriteRequest) (*MutateFavoriteResponse, error)
	// BatchQueryFavorite 批量查询视频的收藏/点赞状态与统计。
	BatchQueryFavorite(context.Context, *BatchQueryFavoriteRequest) (*BatchQueryFavoriteResponse, error)
	// ListFavorites 游标分页返回收藏列表。
	ListFavorites(context.Context, *ListFavoritesRequest) (*ListFavoritesResponse, error)
	// UpsertWatchProgress 写入或更新观看进度。
	UpsertWatchProgress(context.Context, *UpsertWatchProgressRequest) (*UpsertWatchProgressResponse, error)
	// ListWatchHistory 返回最近观看记录。
	ListWatchHistory(context.Context, *ListWatchHistoryRequest) (*ListWatchHistoryResponse, error)
	// PurgeUserData 触发用户数据清理流程。
	PurgeUserData(context.Context, *PurgeUserDataRequest) (*PurgeUserDataResponse, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileServiceServer struct{}

func (UnimplementedProfileServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedProfileServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServiceServer) UpdatePreferences(context.Context, *UpdatePreferencesRequest) (*UpdatePreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreferences not implemented")
}
func (UnimplementedProfileServiceServer) MutateFavorite(context.Context, *MutateFavoriteRequest) (*MutateFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateFavorite not implemented")
}
func (UnimplementedProfileServiceServer) BatchQueryFavorite(context.Context, *BatchQueryFavoriteRequest) (*BatchQueryFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryFavorite not implemented")
}
func (UnimplementedProfileServiceServer) ListFavorites(context.Context, *ListFavoritesRequest) (*ListFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavorites not implemented")
}
func (UnimplementedProfileServiceServer) UpsertWatchProgress(context.Context, *UpsertWatchProgressRequest) (*UpsertWatchProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertWatchProgress not implemented")
}
func (UnimplementedProfileServiceServer) ListWatchHistory(context.Context, *ListWatchHistoryRequest) (*ListWatchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWatchHistory not implemented")
}
func (UnimplementedProfileServiceServer) PurgeUserData(context.Context, *PurgeUserDataRequest) (*PurgeUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeUserData not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}
func (UnimplementedProfileServiceServer) testEmbeddedByValue()                        {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdatePreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdatePreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdatePreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdatePreferences(ctx, req.(*UpdatePreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_MutateFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).MutateFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_MutateFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).MutateFavorite(ctx, req.(*MutateFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_BatchQueryFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).BatchQueryFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_BatchQueryFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).BatchQueryFavorite(ctx, req.(*BatchQueryFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ListFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ListFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ListFavorites(ctx, req.(*ListFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpsertWatchProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertWatchProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpsertWatchProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpsertWatchProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpsertWatchProgress(ctx, req.(*UpsertWatchProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ListWatchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWatchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ListWatchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ListWatchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ListWatchHistory(ctx, req.(*ListWatchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_PurgeUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).PurgeUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_PurgeUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).PurgeUserData(ctx, req.(*PurgeUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.v1.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _ProfileService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileService_UpdateProfile_Handler,
		},
		{
			MethodName: "UpdatePreferences",
			Handler:    _ProfileService_UpdatePreferences_Handler,
		},
		{
			MethodName: "MutateFavorite",
			Handler:    _ProfileService_MutateFavorite_Handler,
		},
		{
			MethodName: "BatchQueryFavorite",
			Handler:    _ProfileService_BatchQueryFavorite_Handler,
		},
		{
			MethodName: "ListFavorites",
			Handler:    _ProfileService_ListFavorites_Handler,
		},
		{
			MethodName: "UpsertWatchProgress",
			Handler:    _ProfileService_UpsertWatchProgress_Handler,
		},
		{
			MethodName: "ListWatchHistory",
			Handler:    _ProfileService_ListWatchHistory_Handler,
		},
		{
			MethodName: "PurgeUserData",
			Handler:    _ProfileService_PurgeUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/profile/v1/profile.proto",
}
