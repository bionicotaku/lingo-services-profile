// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/video/v1/lifecycle.proto

package videov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogLifecycleService_RegisterUpload_FullMethodName         = "/video.v1.CatalogLifecycleService/RegisterUpload"
	CatalogLifecycleService_UpdateOriginalMedia_FullMethodName    = "/video.v1.CatalogLifecycleService/UpdateOriginalMedia"
	CatalogLifecycleService_UpdateProcessingStatus_FullMethodName = "/video.v1.CatalogLifecycleService/UpdateProcessingStatus"
	CatalogLifecycleService_UpdateMediaInfo_FullMethodName        = "/video.v1.CatalogLifecycleService/UpdateMediaInfo"
	CatalogLifecycleService_UpdateAIAttributes_FullMethodName     = "/video.v1.CatalogLifecycleService/UpdateAIAttributes"
	CatalogLifecycleService_ArchiveVideo_FullMethodName           = "/video.v1.CatalogLifecycleService/ArchiveVideo"
)

// CatalogLifecycleServiceClient is the client API for CatalogLifecycleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CatalogLifecycleService 暴露视频生命周期相关的写接口。
type CatalogLifecycleServiceClient interface {
	RegisterUpload(ctx context.Context, in *RegisterUploadRequest, opts ...grpc.CallOption) (*RegisterUploadResponse, error)
	UpdateOriginalMedia(ctx context.Context, in *UpdateOriginalMediaRequest, opts ...grpc.CallOption) (*UpdateOriginalMediaResponse, error)
	UpdateProcessingStatus(ctx context.Context, in *UpdateProcessingStatusRequest, opts ...grpc.CallOption) (*UpdateProcessingStatusResponse, error)
	UpdateMediaInfo(ctx context.Context, in *UpdateMediaInfoRequest, opts ...grpc.CallOption) (*UpdateMediaInfoResponse, error)
	UpdateAIAttributes(ctx context.Context, in *UpdateAIAttributesRequest, opts ...grpc.CallOption) (*UpdateAIAttributesResponse, error)
	ArchiveVideo(ctx context.Context, in *ArchiveVideoRequest, opts ...grpc.CallOption) (*ArchiveVideoResponse, error)
}

type catalogLifecycleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogLifecycleServiceClient(cc grpc.ClientConnInterface) CatalogLifecycleServiceClient {
	return &catalogLifecycleServiceClient{cc}
}

func (c *catalogLifecycleServiceClient) RegisterUpload(ctx context.Context, in *RegisterUploadRequest, opts ...grpc.CallOption) (*RegisterUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUploadResponse)
	err := c.cc.Invoke(ctx, CatalogLifecycleService_RegisterUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogLifecycleServiceClient) UpdateOriginalMedia(ctx context.Context, in *UpdateOriginalMediaRequest, opts ...grpc.CallOption) (*UpdateOriginalMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOriginalMediaResponse)
	err := c.cc.Invoke(ctx, CatalogLifecycleService_UpdateOriginalMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogLifecycleServiceClient) UpdateProcessingStatus(ctx context.Context, in *UpdateProcessingStatusRequest, opts ...grpc.CallOption) (*UpdateProcessingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProcessingStatusResponse)
	err := c.cc.Invoke(ctx, CatalogLifecycleService_UpdateProcessingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogLifecycleServiceClient) UpdateMediaInfo(ctx context.Context, in *UpdateMediaInfoRequest, opts ...grpc.CallOption) (*UpdateMediaInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMediaInfoResponse)
	err := c.cc.Invoke(ctx, CatalogLifecycleService_UpdateMediaInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogLifecycleServiceClient) UpdateAIAttributes(ctx context.Context, in *UpdateAIAttributesRequest, opts ...grpc.CallOption) (*UpdateAIAttributesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAIAttributesResponse)
	err := c.cc.Invoke(ctx, CatalogLifecycleService_UpdateAIAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogLifecycleServiceClient) ArchiveVideo(ctx context.Context, in *ArchiveVideoRequest, opts ...grpc.CallOption) (*ArchiveVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveVideoResponse)
	err := c.cc.Invoke(ctx, CatalogLifecycleService_ArchiveVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogLifecycleServiceServer is the server API for CatalogLifecycleService service.
// All implementations must embed UnimplementedCatalogLifecycleServiceServer
// for forward compatibility.
//
// CatalogLifecycleService 暴露视频生命周期相关的写接口。
type CatalogLifecycleServiceServer interface {
	RegisterUpload(context.Context, *RegisterUploadRequest) (*RegisterUploadResponse, error)
	UpdateOriginalMedia(context.Context, *UpdateOriginalMediaRequest) (*UpdateOriginalMediaResponse, error)
	UpdateProcessingStatus(context.Context, *UpdateProcessingStatusRequest) (*UpdateProcessingStatusResponse, error)
	UpdateMediaInfo(context.Context, *UpdateMediaInfoRequest) (*UpdateMediaInfoResponse, error)
	UpdateAIAttributes(context.Context, *UpdateAIAttributesRequest) (*UpdateAIAttributesResponse, error)
	ArchiveVideo(context.Context, *ArchiveVideoRequest) (*ArchiveVideoResponse, error)
	mustEmbedUnimplementedCatalogLifecycleServiceServer()
}

// UnimplementedCatalogLifecycleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogLifecycleServiceServer struct{}

func (UnimplementedCatalogLifecycleServiceServer) RegisterUpload(context.Context, *RegisterUploadRequest) (*RegisterUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUpload not implemented")
}
func (UnimplementedCatalogLifecycleServiceServer) UpdateOriginalMedia(context.Context, *UpdateOriginalMediaRequest) (*UpdateOriginalMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOriginalMedia not implemented")
}
func (UnimplementedCatalogLifecycleServiceServer) UpdateProcessingStatus(context.Context, *UpdateProcessingStatusRequest) (*UpdateProcessingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessingStatus not implemented")
}
func (UnimplementedCatalogLifecycleServiceServer) UpdateMediaInfo(context.Context, *UpdateMediaInfoRequest) (*UpdateMediaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMediaInfo not implemented")
}
func (UnimplementedCatalogLifecycleServiceServer) UpdateAIAttributes(context.Context, *UpdateAIAttributesRequest) (*UpdateAIAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAIAttributes not implemented")
}
func (UnimplementedCatalogLifecycleServiceServer) ArchiveVideo(context.Context, *ArchiveVideoRequest) (*ArchiveVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveVideo not implemented")
}
func (UnimplementedCatalogLifecycleServiceServer) mustEmbedUnimplementedCatalogLifecycleServiceServer() {
}
func (UnimplementedCatalogLifecycleServiceServer) testEmbeddedByValue() {}

// UnsafeCatalogLifecycleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogLifecycleServiceServer will
// result in compilation errors.
type UnsafeCatalogLifecycleServiceServer interface {
	mustEmbedUnimplementedCatalogLifecycleServiceServer()
}

func RegisterCatalogLifecycleServiceServer(s grpc.ServiceRegistrar, srv CatalogLifecycleServiceServer) {
	// If the following call pancis, it indicates UnimplementedCatalogLifecycleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogLifecycleService_ServiceDesc, srv)
}

func _CatalogLifecycleService_RegisterUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogLifecycleServiceServer).RegisterUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogLifecycleService_RegisterUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogLifecycleServiceServer).RegisterUpload(ctx, req.(*RegisterUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogLifecycleService_UpdateOriginalMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOriginalMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogLifecycleServiceServer).UpdateOriginalMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogLifecycleService_UpdateOriginalMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogLifecycleServiceServer).UpdateOriginalMedia(ctx, req.(*UpdateOriginalMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogLifecycleService_UpdateProcessingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogLifecycleServiceServer).UpdateProcessingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogLifecycleService_UpdateProcessingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogLifecycleServiceServer).UpdateProcessingStatus(ctx, req.(*UpdateProcessingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogLifecycleService_UpdateMediaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogLifecycleServiceServer).UpdateMediaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogLifecycleService_UpdateMediaInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogLifecycleServiceServer).UpdateMediaInfo(ctx, req.(*UpdateMediaInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogLifecycleService_UpdateAIAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAIAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogLifecycleServiceServer).UpdateAIAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogLifecycleService_UpdateAIAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogLifecycleServiceServer).UpdateAIAttributes(ctx, req.(*UpdateAIAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogLifecycleService_ArchiveVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogLifecycleServiceServer).ArchiveVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogLifecycleService_ArchiveVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogLifecycleServiceServer).ArchiveVideo(ctx, req.(*ArchiveVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogLifecycleService_ServiceDesc is the grpc.ServiceDesc for CatalogLifecycleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogLifecycleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.v1.CatalogLifecycleService",
	HandlerType: (*CatalogLifecycleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUpload",
			Handler:    _CatalogLifecycleService_RegisterUpload_Handler,
		},
		{
			MethodName: "UpdateOriginalMedia",
			Handler:    _CatalogLifecycleService_UpdateOriginalMedia_Handler,
		},
		{
			MethodName: "UpdateProcessingStatus",
			Handler:    _CatalogLifecycleService_UpdateProcessingStatus_Handler,
		},
		{
			MethodName: "UpdateMediaInfo",
			Handler:    _CatalogLifecycleService_UpdateMediaInfo_Handler,
		},
		{
			MethodName: "UpdateAIAttributes",
			Handler:    _CatalogLifecycleService_UpdateAIAttributes_Handler,
		},
		{
			MethodName: "ArchiveVideo",
			Handler:    _CatalogLifecycleService_ArchiveVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/video/v1/lifecycle.proto",
}
